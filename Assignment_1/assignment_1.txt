.data

day1:
    .word 10, 20, 30, 0        @ Sales for day 1, ending with 0
day2:
    .word 5, 7, 0            @ Sales for day 2
day3:
    .word 15, 25, 35, 45, 0         @ Sales for day 3
day4:
    .word 50, 0            @ Sales for day 4
day5:
    .word 100, 200, 0            @ Sales for day 5

@ Memory for calculated results
total_sales:
    .word 0                    @ Variable for total sales
max_sales:
    .word 0                    @ Variable for max sales
min_sales:
    .word 0xFFFFFFFF           @ Variable for min sales
avg_sales:
    .word 0                    @ Variable for average sales

.text
.global _start


_start:
    @ Initialize total_sales, max_sales, and min_sales
    LDR R0, =total_sales      @ Get the memory address of total_sales
    MOV R1, #0                @ Initialize R1 to 0
    STR R1, [R0]              @ Store 0 in total_sales

    LDR R0, =max_sales        @ Get the memory address of max_sales
    STR R1, [R0]              @ Store 0 in max_sales (since we're dealing with positive sales)

    LDR R0, =min_sales        @ Get the memory address of min_sales
    MVN R1, #0                @ Set R1 to 0xFFFFFFFF (max possible value)
    STR R1, [R0]              @ Store the large value in min_sales to track the smallest sales

    @ Process each dayâ€™s sales
    LDR R0, =day1             @ Process day 1 sales
    BL process_day

    LDR R0, =day2             @ Process day 2 sales
    BL process_day

    LDR R0, =day3             @ Process day 3 sales
    BL process_day

    LDR R0, =day4             @ Process day 4 sales
    BL process_day

    LDR R0, =day5             @ Process day 5 sales
    BL process_day

    @ Calculate average sales
    LDR R0, =total_sales      @ Load address of total_sales
    LDR R1, [R0]              @ Load the total sales value into R1
    MOV R2, #5                @ Number of days (divisor)
    BL divide                 @ Call divide function to calculate average

    LDR R0, =avg_sales        @ Load the address of avg_sales
    STR R1, [R0]              @ Store the average sales in memory

    @ End program with proper exit system call
    MOV R7, #1                @ Exit system call number
    MOV R0, #0                @ Return code 0 (success)
    SWI 0                     @ Make the system call to exit

process_day:
    PUSH {R4-R7, LR}          @ Save used registers and link register

process_day_loop:
    LDR R1, [R0], #4          @ Load the next sales value into R1, increment R0
    CMP R1, #0                @ Compare with 0 (end of sales data for the day)
    BEQ process_day_end       @ If 0, go to process_day_end

    @ Total sales updating
    LDR R2, =total_sales      @ Load address of total_sales
    LDR R3, [R2]              @ Load current total_sales value
    ADD R3, R3, R1            @ Add current sales value to total_sales
    STR R3, [R2]              @ Updated total_sales is stored in memory

    @ Update max sales
    LDR R4, =max_sales        @ Load max_sales address
    LDR R5, [R4]              @ Load max_sales current value
    CMP R1, R5                @ Compare max_sales and current sales
    BLS max_upd_skip          @ If sales value <= max_sales, skip updating
    STR R1, [R4]              @ Store the new max_sales

max_upd_skip:
    @ Update min sales
    LDR R6, =min_sales        @ Load address of min_sales
    LDR R5, [R6]              @ Load current min_sales
    CMP R1, R5                @ Compare current sales with min_sales
    BHS min_upd_skip          @ If sales value >= min_sales, skip update
    STR R1, [R6]              @ Store the new min_sales

min_upd_skip:
    B process_day_loop        @ Repeat for next sales value

process_day_end:
    POP {R4-R7, PC}           @ Restore saved registers and return to main program

divide:
    CMP R1, R2                @ Compare numerator (total sales) with divisor (5 days)
    MOV R3, #0                @ Initialize R3 to 0 for storing quotient
    BEQ divide_done           @ If numerator == divisor, skip division
div_loop:
    SUB R1, R1, R2            @ Subtract 5 from total sales
    ADD R3, R3, #1            @ Increment quotient
    CMP R1, R2                @ Compare again to check if still >= divisor
    BGE div_loop              @ Loop until R1 < R2
divide_done:
    MOV R1, R3                @ Store quotient in R1 for average result
    MOV PC, LR                @ Return to caller
